#include <iostream>

class FlightBooking {
public:
    FlightBooking(int id, int capacity, int reserved);
    void printStatus();
    bool reserveSeats(int number_of_seats);
    bool cancelReservations(int number_of_seats);


private:
    int id;
    int capacity;
    int reserved;
};

FlightBooking::FlightBooking(int id, int capacity, int reserved){
    if (capacity >= 0) {
        this->capacity = capacity;
    } else {
        this->capacity = 0;
    }
   
if (reserved >= 0 && reserved <= 1.05 * capacity) {
        this->reserved = reserved;
    } else {
        this->reserved = 0;
    }
}

void FlightBooking::printStatus()
{
    double percentage = (static_cast<double>(reserved) / capacity) * 100.0;
    std::cout << "Flight " << id << " : " << reserved << "/" << capacity
              << " (" << percentage << "%) seats taken" << std::endl;
}

bool FlightBooking::reserveSeats(int number_of_seats)
{
    int new_reserved = reserved + number_of_seats;

    if (new_reserved >= 0 && new_reserved <= 1.05 * capacity)
    {
        reserved = new_reserved;
        return true;
    }

    return false;
}

bool FlightBooking::cancelReservations(int number_of_seats)
{
    int new_reserved = reserved - number_of_seats;

    if (new_reserved >= 0)
    {
        reserved = new_reserved;
        return true;
    }

    return false;
}

int main()
{
    int reserved = 0, capacity = 0;
    std::cout << "Provide flight capacity: ";
    std::cin >> capacity;
    std::cout << "Provide number of reserved seats: ";
    std::cin >> reserved;

    FlightBooking booking(1, capacity, reserved);
    std::string command = "";

    while (command != "quit")
    {
        booking.printStatus();
        std::cout << "What would you like to do?: ";
        std::getline(std::cin, command);

        if (command.substr(0, 3) == "add")
        {
            int seats_to_add = std::stoi(command.substr(4));
            if (!booking.reserveSeats(seats_to_add))
                std::cout << "Cannot perform this operation" << std::endl;
        }
        else if (command.substr(0, 6) == "cancel")
        {
            int seats_to_cancel = std::stoi(command.substr(7));
            if (!booking.cancelReservations(seats_to_cancel))
                std::cout << "Cannot perform this operation" << std::endl;
        }
    }

    return 0;
}